[2025-09-17T22:25:37.164+08:00] actionInActionSpace matched {
  name: 'Input',
  description: 'Input the value into the element',
  interfaceAlias: 'aiInput',
  paramSchema: ZodObject {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      shape: [Function: shape],
      unknownKeys: 'strip',
      catchall: [ZodNever],
      typeName: 'ZodObject'
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] },
    _cached: null,
    nonstrict: [Function: passthrough],
    augment: [Function: extend]
  },
  call: [AsyncFunction (anonymous)]
}
[2025-09-17T22:25:37.164+08:00] locateFields [ 'locate' ]
[2025-09-17T22:25:44.702+08:00] actionInActionSpace matched {
  name: 'KeyboardPress',
  description: 'Press a function key, like "Enter", "Tab", "Escape". Do not use this to type text.',
  interfaceAlias: 'aiKeyboardPress',
  paramSchema: ZodObject {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      shape: [Function: shape],
      unknownKeys: 'strip',
      catchall: [ZodNever],
      typeName: 'ZodObject'
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] },
    _cached: null,
    nonstrict: [Function: passthrough],
    augment: [Function: extend]
  },
  call: [AsyncFunction (anonymous)]
}
[2025-09-17T22:25:44.702+08:00] locateFields [ 'locate' ]
[2025-09-17T22:33:35.110+08:00] actionInActionSpace matched {
  name: 'Input',
  description: 'Input the value into the element',
  interfaceAlias: 'aiInput',
  paramSchema: ZodObject {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      shape: [Function: shape],
      unknownKeys: 'strip',
      catchall: [ZodNever],
      typeName: 'ZodObject'
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] },
    _cached: null,
    nonstrict: [Function: passthrough],
    augment: [Function: extend]
  },
  call: [AsyncFunction (anonymous)]
}
[2025-09-17T22:33:35.110+08:00] locateFields [ 'locate' ]
[2025-09-17T22:33:41.151+08:00] actionInActionSpace matched {
  name: 'Tap',
  description: 'Tap the element',
  interfaceAlias: 'aiTap',
  paramSchema: ZodObject {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      shape: [Function: shape],
      unknownKeys: 'strip',
      catchall: [ZodNever],
      typeName: 'ZodObject'
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] },
    _cached: null,
    nonstrict: [Function: passthrough],
    augment: [Function: extend]
  },
  call: [AsyncFunction (anonymous)]
}
[2025-09-17T22:33:41.151+08:00] locateFields [ 'locate' ]
[2025-09-17T22:36:23.449+08:00] actionInActionSpace matched {
  name: 'Input',
  description: 'Input the value into the element',
  interfaceAlias: 'aiInput',
  paramSchema: ZodObject {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      shape: [Function: shape],
      unknownKeys: 'strip',
      catchall: [ZodNever],
      typeName: 'ZodObject'
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] },
    _cached: null,
    nonstrict: [Function: passthrough],
    augment: [Function: extend]
  },
  call: [AsyncFunction (anonymous)]
}
[2025-09-17T22:36:23.449+08:00] locateFields [ 'locate' ]
[2025-09-17T22:36:33.508+08:00] actionInActionSpace matched {
  name: 'Tap',
  description: 'Tap the element',
  interfaceAlias: 'aiTap',
  paramSchema: ZodObject {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      shape: [Function: shape],
      unknownKeys: 'strip',
      catchall: [ZodNever],
      typeName: 'ZodObject'
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] },
    _cached: null,
    nonstrict: [Function: passthrough],
    augment: [Function: extend]
  },
  call: [AsyncFunction (anonymous)]
}
[2025-09-17T22:36:33.508+08:00] locateFields [ 'locate' ]
[2025-09-17T22:36:41.427+08:00] actionInActionSpace matched {
  name: 'Input',
  description: 'Input the value into the element',
  interfaceAlias: 'aiInput',
  paramSchema: ZodObject {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      shape: [Function: shape],
      unknownKeys: 'strip',
      catchall: [ZodNever],
      typeName: 'ZodObject'
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] },
    _cached: null,
    nonstrict: [Function: passthrough],
    augment: [Function: extend]
  },
  call: [AsyncFunction (anonymous)]
}
[2025-09-17T22:36:41.427+08:00] locateFields [ 'locate' ]
[2025-09-17T22:36:50.108+08:00] actionInActionSpace matched {
  name: 'Input',
  description: 'Input the value into the element',
  interfaceAlias: 'aiInput',
  paramSchema: ZodObject {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      shape: [Function: shape],
      unknownKeys: 'strip',
      catchall: [ZodNever],
      typeName: 'ZodObject'
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] },
    _cached: null,
    nonstrict: [Function: passthrough],
    augment: [Function: extend]
  },
  call: [AsyncFunction (anonymous)]
}
[2025-09-17T22:36:50.108+08:00] locateFields [ 'locate' ]
[2025-09-18T10:38:49.369+08:00] actionInActionSpace matched {
  name: 'Input',
  description: 'Input the value into the element',
  interfaceAlias: 'aiInput',
  paramSchema: ZodObject {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      shape: [Function: shape],
      unknownKeys: 'strip',
      catchall: [ZodNever],
      typeName: 'ZodObject'
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] },
    _cached: null,
    nonstrict: [Function: passthrough],
    augment: [Function: extend]
  },
  call: [AsyncFunction (anonymous)]
}
[2025-09-18T10:38:49.369+08:00] locateFields [ 'locate' ]
[2025-09-18T10:39:01.154+08:00] actionInActionSpace matched {
  name: 'Tap',
  description: 'Tap the element',
  interfaceAlias: 'aiTap',
  paramSchema: ZodObject {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      shape: [Function: shape],
      unknownKeys: 'strip',
      catchall: [ZodNever],
      typeName: 'ZodObject'
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] },
    _cached: null,
    nonstrict: [Function: passthrough],
    augment: [Function: extend]
  },
  call: [AsyncFunction (anonymous)]
}
[2025-09-18T10:39:01.154+08:00] locateFields [ 'locate' ]
[2025-09-18T10:39:09.284+08:00] actionInActionSpace matched {
  name: 'Input',
  description: 'Input the value into the element',
  interfaceAlias: 'aiInput',
  paramSchema: ZodObject {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      shape: [Function: shape],
      unknownKeys: 'strip',
      catchall: [ZodNever],
      typeName: 'ZodObject'
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] },
    _cached: null,
    nonstrict: [Function: passthrough],
    augment: [Function: extend]
  },
  call: [AsyncFunction (anonymous)]
}
[2025-09-18T10:39:09.284+08:00] locateFields [ 'locate' ]
[2025-09-18T10:39:39.556+08:00] actionInActionSpace matched {
  name: 'Input',
  description: 'Input the value into the element',
  interfaceAlias: 'aiInput',
  paramSchema: ZodObject {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      shape: [Function: shape],
      unknownKeys: 'strip',
      catchall: [ZodNever],
      typeName: 'ZodObject'
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] },
    _cached: null,
    nonstrict: [Function: passthrough],
    augment: [Function: extend]
  },
  call: [AsyncFunction (anonymous)]
}
[2025-09-18T10:39:39.556+08:00] locateFields [ 'locate' ]
[2025-09-18T10:39:48.208+08:00] actionInActionSpace matched {
  name: 'Input',
  description: 'Input the value into the element',
  interfaceAlias: 'aiInput',
  paramSchema: ZodObject {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      shape: [Function: shape],
      unknownKeys: 'strip',
      catchall: [ZodNever],
      typeName: 'ZodObject'
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] },
    _cached: null,
    nonstrict: [Function: passthrough],
    augment: [Function: extend]
  },
  call: [AsyncFunction (anonymous)]
}
[2025-09-18T10:39:48.208+08:00] locateFields [ 'locate' ]
[2025-09-18T10:39:59.602+08:00] actionInActionSpace matched {
  name: 'Input',
  description: 'Input the value into the element',
  interfaceAlias: 'aiInput',
  paramSchema: ZodObject {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      shape: [Function: shape],
      unknownKeys: 'strip',
      catchall: [ZodNever],
      typeName: 'ZodObject'
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] },
    _cached: null,
    nonstrict: [Function: passthrough],
    augment: [Function: extend]
  },
  call: [AsyncFunction (anonymous)]
}
[2025-09-18T10:39:59.602+08:00] locateFields [ 'locate' ]
[2025-09-18T10:40:07.182+08:00] actionInActionSpace matched {
  name: 'Input',
  description: 'Input the value into the element',
  interfaceAlias: 'aiInput',
  paramSchema: ZodObject {
    spa: [Function: bound safeParseAsync] AsyncFunction,
    _def: {
      shape: [Function: shape],
      unknownKeys: 'strip',
      catchall: [ZodNever],
      typeName: 'ZodObject'
    },
    parse: [Function: bound parse],
    safeParse: [Function: bound safeParse],
    parseAsync: [Function: bound parseAsync] AsyncFunction,
    safeParseAsync: [Function: bound safeParseAsync] AsyncFunction,
    refine: [Function: bound refine],
    refinement: [Function: bound refinement],
    superRefine: [Function: bound superRefine],
    optional: [Function: bound optional],
    nullable: [Function: bound nullable],
    nullish: [Function: bound nullish],
    array: [Function: bound array],
    promise: [Function: bound promise],
    or: [Function: bound or],
    and: [Function: bound and],
    transform: [Function: bound transform],
    brand: [Function: bound brand],
    default: [Function: bound default],
    catch: [Function: bound catch],
    describe: [Function: bound describe],
    pipe: [Function: bound pipe],
    readonly: [Function: bound readonly],
    isNullable: [Function: bound isNullable],
    isOptional: [Function: bound isOptional],
    '~standard': { version: 1, vendor: 'zod', validate: [Function: validate] },
    _cached: null,
    nonstrict: [Function: passthrough],
    augment: [Function: extend]
  },
  call: [AsyncFunction (anonymous)]
}
[2025-09-18T10:40:07.182+08:00] locateFields [ 'locate' ]
